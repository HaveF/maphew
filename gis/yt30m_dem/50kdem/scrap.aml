&args routine tile:rest
&ty
&ty   * [upcase %aml$file%] * Project: Yukon 50k DEM * mhwilkie * 03-Aug-2k
&ty     ::n/a::  (see scipts\__ReadMe.aml)
&ty
&ty     This is the general proving ground for Quick & Dirty scriplets.
&ty     Use at your own risk.
&ty
&ty     Usage: &r %aml$file% <routine> {tile1 tile2 tile3 ...}
&ty
&ty         about to call routine [upcase %routine%]
&ty         with tiles:           %tile%
&run beep
&s pause [response '<Enter> to continue, something else to abort']
    &if not [null %pause%] &then &return %aml$file% exited by user request.

&if not [variable .home] &then
    &return &error Project Environment has not been setup.

&workspace %.home%

&if [null %tile%] &then &set tile [listfile * -workspace]
&if not [null %routine%] &then &call %routine%
&if not [null %routine%] &then &stop


/*&call build-neats
/*&call kill_flips
/*&call kill_qwtc
/*&call append_wtc
/*&call rebuild_cont

&STOP

/*----------------------------------------------------------------------------
&routine slcr_placemats
&set tiles = 105D13,105D14,105D15,105D16,105C13,105C14,105C15,105D12,105D11,105D10,105D09,105C12,105C11,105C10,105D05,105D06,105D07,105D08,105C05,105C06,10507,105D04,105D03,105D02,105D01,105C04,105C03,105C02,104M13,104M14,104M15,104M16,104N13,104N14,104N15

&set full =

&do for_each &list [unquote %tiles%]
   &set full = %full% [substr %for_each% 1 4]\%for_each%,






&routine David_Milne
&set src = W:\lims50kdem\release\50k
&set dst = w:\outgoing\David_Milne
   &if not [exists %dst% -directory] &then &sys mkdir %dst%
&set metadir = z:\arcdata\50k\base\
&set metafiles = buglist.txt Changes.txt NTDB-bugs.shp NTDB-bugs.shx NTDB-bugs.dbf

&set requested = 104O15 104O16 104P13 104P14 104P15 104P16 105A01 105A02 105A03 105A04 105A05 105A06 105A07 105A08 105A09 105A10 105A11 105A12 105B01 105B02 105B07 105B08 105B09 105B10

&set datafiles = {tile}_dem.asc {tile}_dem.prj {tile}_dem_hs.tif {tile}_dem_hs.tfw

&sys date /t  > %dst%\report.txt
&sys time /t >> %dst%\report.txt

   &do tile &list [unquote %requested%]
      &set quad = [substr %tile% 1 4]
      &if [exists %src%\%quad%\%tile%_dem.tgz -file] &then
         &sys copy %src%\%quad%\%tile%*.* %dst%
            &else
         &set missing = %tile%
   &end

   &do meta &list [unquote %metafiles%]
      &if [exists %metadir%\%meta% -file] &then
         &sys copy %metadir%\%meta% %dst%
   &end


&listvar &file %dst%\report.txt &format '%1% = %2%' &append src dst requested datafiles missing metadir metafiles

&wo %dst%
   &sys tar --remove-files -zcvf _metadata.tgz %metafiles% report.txt
&wo %.home%

&RETURN
/*----------------------------------------------------------------------------

&routine clip_1k
&lv tile
   &do cov &list [unquote %tile%]
      &wo [substr %cov% 1 4]\%cov% ; &type [show workspace]
      &set fwtc = fwtc
      &if [exists %fwtc%_f -cover] &then &set fwtc = fwtc_f
      &if [exists %fwtc% -cover] &then &do
         clip %fwtc% buf_1k %fwtc%-c line 0.00000001
         kill %fwtc% all
         rename %fwtc%-c %fwtc%
         &end
      &wo %.home%
   &end
&return



&routine listunique_z
&severity &error &ignore
&wo %.home%\115c\115c15
&set contours = fctr
&set elev = z_metric
   /* list unique elevation values for center tile
   &set unique = [format [listunique %contours%.aat -info %elev%]]
   /* if var 'unique' does not exist, it's because listunique result was too long, therefore we need to write to a file and extract our min,max & interval from that
   &if not [variable unique] &then &do
      &setvar fil = elev_range.list
      /* write unique values to file
      &set unique = [listunique %contours%.aat -info %elev% %fil%]
      /* open the file for reading
      &setvar filunit := [open %fil% openstatus -read]
         /* Check for error in opening file.
         &if %openstatus% <> 0 &then &return &warning Error opening %fil%.
      /* Read first line from file
      &setvar line := [read %filunit% readstatus]
         &if %readstatus% <> 0 &then &return &warning Could not read %fil%.
      /* assign contents of first line to first element in var 'unique'
      &set unique = %line%
      /* read second line and append to var 'unique'
      &set line =  [read %filunit% readstatus]
      &set unique = %unique% %line% /*first line + second line

      /* read until we hit end of file (we don't need the in-between values)
      &do &until %readstatus% = 102
        /* save the previous line
        &set prev_line = %line%
        /* Read next line.
        &set line = [read %filunit% readstatus]
        &if %readstatus% = 101 &then &return &warning Error 101 during read %fil%.
      &end

      &set unique = %unique% %prev_line% /*first line + second line + last line

      /* Close file.
      &if [close %filunit%] <> 0 &then &return &warning Unable to close %fil%.
   &end
&listvar
&format %sav$format%
&return

/*----------------------------------------------------------------------------
&routine segfault_flipgrid
&s quads = [listfile * -workspace]
&s quads = 116a /* debug line

&do quad &list [unquote %quads%]
   &wo %quad% ; &type ...[show workspace]
   &do for_each &list [listfile * -workspace]
      &wo %for_each%
      &s err = [listfile *.err -file]
      &if not [null [quote %err%]] &then &type ...%quad%\%for_each%\%err%
      &if not [exists flip_grd -grid] &then &type ......no flipgrid either
      &wo ..
   &end
   &wo %.home%
&end
&return

Segment Violation.err


/*----------------------------------------------------------------------------
&routine cam_mosaic
&if [locase[show program]] <> grid &then grid
/*&s quads = 106f 106e 106l 116h 116g 116i 116j 116k 116o 116p 116n 116f
&s quads = 095c
   &do quad &list [unquote %quads%]
      &workspace %quad%

         /* dems
         &if not [exists dem_%quad% -grid] &then &do
               &s tiles = [subst [listfile * -workspace] , \dem,]
               &s tiles = %tiles%\dem
               &type ...mosaicking "%tiles%" into [upcase "dem_%quad%"]
               dem_%quad% = mosaic(%tiles%)

               &type ...resampling to 100 meter pixels
               dem_%quad%_100m = resample(dem_%quad%,100,bilinear)
               kill dem_%quad% all
               rename dem_%quad%_100m dem_%quad%
               &type ...renamed dem_%quad%_100m to dem_%quad%
            &end

         /* hillshades
         &if not [exists shade_%quad% -grid] &then &do
               &s tiles = [subst [listfile * -workspace] , \dem_hs,]
               &s tiles = %tiles%\dem_hs
               &type ...mosaicking "%tiles%" into [upcase "shade_%quad%"]
               shade_%quad% = mosaic(%tiles%)

               &type ...resampling to 100 meter pixels
               sh_%quad%_100m = resample(shade_%quad%,100,bilinear)
               kill shade_%quad% all
               rename sh_%quad%_100m shade_%quad%
               &type ...renamed shade_%quad%_100m to shade_%quad%
         &end

      &workspace ..
   &end
quit
&return
/*----------------------------------------------------------------------------
&routine rename_mosaics
&type ...routine to rename specified covers/grids
&set quads = [listfile * -workspace]
&do quad &list [unquote %quads%]
   &wo %quad% ; &ty ...processing [show workspace]

   &if [exists dem_%quad% -grid] &then &do
      &describe dem_%quad%
      &if %img$dx% = 100 &then rename dem_%quad% dem_100m
      &if %img$dx% =  30 &then rename dem_%quad% dem_30m
      &end

   &if [exists shade_%quad% -grid] &then &do
      &describe shade_%quad%
      &if %img$dx% = 100 &then rename shade_%quad% shade_100m
      &if %img$dx% =  30 &then rename shade_%quad% shade_30m
      &end

   &wo ..
&end

&return

/*----------------------------------------------------------------------------

/*----------------------------------------------------------------------------
&routine kill_bigpixel
&type ...routine to kill flip_grd's with oversize pixels
&do quad &list [listfile * -directory]
   &wo %quad%
      &set tiles = [listfile * -workspace]
      &if not [null %tiles%] &then
         &do
            &do tile &list [unquote %tiles%]
               &wo %tile% ; &type ...[show workspace]
                  &if [exists flip_grd -grid] &then &do
                     &describe flip_grd
                     &if %img$dx% > 200 &then kill flip_grd all
                     &end
               &wo ..
            &end
         &end
      &set tile =
   &wo ..
&end

&return

/*----------------------------------------------------------------------------
/*----------------------------------------------------------------------------
&routine kill_bigpixdem
&type ...routine to kill DEM's with oversize pixels
&do quad &list [listfile * -directory]
   &wo %quad%
      &set tiles = [listfile * -workspace]
      &if not [null %tiles%] &then
         &do
            &do tile &list [unquote %tiles%]
               &wo %tile% ; &type ...[show workspace]
                  &if [exists dem -grid] &then &do
                     &describe dem
                     &if %img$dx% > 30 &then kill dem all
                     &end
               &wo ..
            &end
         &end
      &set tile =
   &wo ..
&end

&return

/*----------------------------------------------------------------------------
&routine make_dem
&if [null %tile%] &then &return ...missing tile(s) argument
&s dem = dem
&s cellsize = 10
&s boundary buf_1k
&s creek = fwtc
&s lake_ctr = lake_ctr
&s cont_cov = fctr
&s tol_1 = 10
&s tol_2 = 1.0
/* &listlocal
&do for_each &list [unquote %tile%]
   &wo [substr %for_each% 1 4]\%for_each%
     &if [exists %dem% -grid] &then &goto Fini
     &if not [exists %creek%_f -cover] &then &goto Fini

      &type ...[date -vfull] * Minutes since last: [calc [extract 2 [show &pt all]] / 60]
      &type ...[show workspace]
      &sys if exist dem_diag del dem_diag

      &severity &error &ignore
      TOPOGRID %dem% %cellsize%
      BOUNDARY %boundary%
      ENFORCE ON
      DATATYPE CONTOUR
      MARGIN 0.0
      ITERATIONS 30
      TOLERANCES %Tol_1% %Tol_2% 0.0
      STREAM %creek%_f
      CONTOUR %lake_ctr% Z_metric
      OUTPUTS %dem%_sink %dem%_drain %dem%_diag
      CONTOUR %cont_cov% Z_metric
      /* see if this tile has Alaska or BC point data
      &do pnts &list ak_pnt bc_elv
           &if [exists %pnts% -point] &then
               POINT %pnts% Z
      &end
      END /* exit topogrid config and make dem
      &severity &error &fail

      &type ...[date -vfull] * Minutes since last: [calc [extract 2 [show &pt all]] / 60]
     &label Fini
   &wo %.home%
&end
&return
/*----------------------------------------------------------------------------

/*----------------------------------------------------------------------------
&routine ident_segfault

&type ...identifying tiles which have Segment Violation problems
&set seg_list =

&s quad_list [listfile * -workspace]

&do quad &list [unquote %quad_list%]
   &wo %quad%
      &do tile &list [listfile * -workspace]
         &wo %tile%
            &set errs = [listfile *.err -file]
            &if [keyword %errs% 'segment violation'] > 0 &then
               &s seg_list = %seg_list% [substr [show workspace] 20]
            &delvar errs segfault
         &wo ..
      &end
   &wo ..
&end
&type %seg_list%

&return
/*----------------------------------------------------------------------------

/*----------------------------------------------------------------------------
&routine rebuild_cont
    &do tile &list 106f,106k,106l,114o,114p,115a,115b,115c,115f,115g,115h,115i,115j,115k,115n,115o,115p,116a,116b,116c,116f,116g,116h,116i,116j,116k,116n,116o,116p,117a,117b,117c,117d
    /* [listfile * -workspace]
        kill %.library%\%tile%\qctr all
        copy f:\albers\%tile%\qctr %.library%\%tile%\qctr
        build %.library%\%tile%\qctr line
    &end
&return

/*----------------------------------------------------------------------------
&routine kill_dems
&type ...routine to kill DEMs and friends in specified tile workspaces

&set cov = dem /* cover/grid to be killed

&do for_each &list [unquote %tile%]
   &s quad = [substr %for_each% 1 4]
   &if [exists %quad%\%for_each%\%cov% -grid] &then kill %quad%\%for_each%\%cov% all

&end

&return
/*----------------------------------------------------------------------------
/*----------------------------------------------------------------------------
&routine kill_qwtc
    &do tile &list 117c 117b 116n 116o 116p
        &if [exists %tile%\qwtc -cover] &then kill %tile%\qwtc all
    &end
&return
/*----------------------------------------------------------------------------
&routine append_wtc
    &do tile &list 117c 117b 116n 116o 116p
      &wo %tile%
        &sys sed 's/$/\\qwtc/' overlap.path.bare > qwtc.path
        &sys echo END >> qwtc.path
        &sys Arc Append qwtc all < qwtc.path
      &wo ..
    &end
&return

/* ------------------------------------------------------------------------
&routine list
    &do tile &list [listfile * -workspace]
        &call main
    &end
&return
/*----------------------------------------------------------------------------

&ROUTINE MAIN
    ...some code goes here...
&return
/* ------------------------------------------------------------------------

&routine build-neats
    &do tile &list [listfile %.library%\* -directory]
        &if [exists %.library%\%tile%\qneat -cover]  &then
            build %.library%\%tile%\qneat poly
    &end
&return

/* ------------------------------------------------------------------------
&routine kill_flips /* kill flipping grids
&type ...killing off FLIP_GRD and friends
    &if [null %tile%] &then &return TILES must be passed on command line
    &do todo &list [unquote %tile%]
        /* &ty %todo%
        &set quad = [substr %todo% 1 4]
        &if not [exists %quad% -workspace] &then &goto End_Loop
        &wo %quad%
            &if [exist %todo%\flip_grd -grid] &then kill %todo%\flip_grd all
            &if [exist %todo%\flip_hs -grid]  &then kill %todo%\flip_hs all
            &if [exist %todo%\flip_sink -cover]  &then kill %todo%\flip_sink all
            &if [exist %todo%\flip_drain -cover] &then kill %todo%\flip_drain all
            &sys if exist %todo%\flip_diag del %todo%\flip_diag
        &wo ..
        &label End_Loop
    &end

&return
/*----------------------------------------------------------------------------
/* ------------------------------------------------------------------------
&routine kill_dems /* kill dem grids
&type ...killing off DEM and friends
    &if [null %tile%] &then &return TILES must be passed on command line
    &do todo &list [unquote %tile%]
        /* &ty %todo%
        &set quad = [substr %todo% 1 4]
        &if not [exists %quad% -workspace] &then &goto End_Loop
        &wo %quad%
            &if [exist %todo%\dem -grid] &then kill %todo%\dem all
            &if [exist %todo%\dem_hs -grid]  &then kill %todo%\dem_hs all
            &if [exist %todo%\dem_sink -cover]  &then kill %todo%\dem_sink all
            &if [exist %todo%\dem_drain -cover] &then kill %todo%\dem_drain all
            &sys if exist %todo%\dem_diag del %todo%\dem_diag
        &wo ..
        &label End_Loop
    &end

&return
/*----------------------------------------------------------------------------
&routine kill_akpnt /* kill alaska point dem covers
&type ...killing off AK_PNT and friends
    &do tile &list [unquote %tile%]
        &wo %tile%
            &s item = [listfile ak* -cover] [listfile ak* -grid]
            &if not [null %item%] &then kill (!%item%!) all
        &wo ..
    &end
&return
/*----------------------------------------------------------------------------
&routine change_metric
&workspace %.LIBRARY%
&type ...changing Z_unit definition from METRES to PIEDS
&do tile  &list 116p01 095e12 095d04 105d03 105c04 115a01 116b14 116p01 115a08 115a10 105d04 105c03 105c11 105c12 116b11 095d05 105a07 095e05

    /* the 1st four characters are the major nts name (quad)
    /*  [substring <string> <position> {num_chars}]
    &set quad = [substr %tile% 1 4]
    &wo %quad%\%tile%
        list fneat.aat z_units
        list fctr.aat 1 10 z z_metric

        &s pause [response '<Enter> to continue, something else to abort']
            &if not [null %pause%] &then &return %aml$file% exited by user request.

        tables
            select fneat.aat
            calculate Z_Units = 'PIEDS'
            select fctr.aat
            calculate Z_Metric = Z * 0.3048
        quit

    &wo ..\..
&end
&workspace %.HOME%
&return
/*----------------------------------------------------------------------------
&routine disp_overlaps
&type ...identifying overlaps, using variable TILE as centroid
    &do todo &list [unquote %tile%]
        &s quad = [substr %todo% 1 4]
        &sys type %quad%\%tile%\overlap.path.bare
    &end
&return
/*----------------------------------------------------------------------------
&routine kill_lakes
&type ...killing LAKE_CTR covers
    &do quad &list 116j 116k 116o 116p 117a 117b 117c 117d
        &wo %quad%
        &do tile &list [listfile * -workspace]
            &if [exists %tile%\lake_ctr -cover] &then kill %tile%\lake_ctr all
        &end
        &wo ..
    &end
&return
/*----------------------------------------------------------------------------
&routine kill_fctr
    &if [null %tile%] &then &return &error tiles must be passed on commandline
    &type ...Killing FCTR from %tile%
    &do tile &list [unquote %tile%]
        &s quad = [substr %tile% 1 4]
        &if [exists %quad%\%tile%\fctr -cover] &then kill %quad%\%tile%\fctr all
    &end
&return

/*----------------------------------------------------------------------------
&routine ident_overlap /* identify which tiles surrounding center tile
    &if [null %tile%] &then &return TILES must be passed on command line
&ty
&ty     Identify tiles which surround center tile,
&ty     save in global variable "OVER_LIST"
&ty
&ty     The center tiles passed on the command line are:
&ty
&ty     %tile%
&ty
&set .over_list =  /* make sure gobal overlap list is empty
&do todo &list [unquote %tile%]
    /* &ty %todo%
    &set quad = [substr %todo% 1 4]
    &wo %quad%\%todo%
        /* ---------------------------------------------------------------------
        &DO /* open the list of paths file created by FIND_PATHS, combine all lines into a single variable
           &setvar file = [open overlap.path.bare openstatus -read] /* open file
               &if %openstatus% <> 0 &then
                   &return &warning Error opening  %file%

           &setvar line = [read %file% readstatus] /* Read first line
               &set line_length = [length %line%]
               &set cut_pos = %line_length% - 5
               &set over_list = [substr %line% %cut_pos%] /* extract last 6 chars (eg. 117a03)
/*           &listvar /* debug line
           &if %readstatus% <> 0 &then
               &return &warning Could not read %file%

           &do &while %readstatus% = 0
               &setvar line = [read %file% readstatus] /* Read next line
                   &set line_length = [length %line%]
                   &set cut_pos = %line_length% - 5
/*                     &listvar /* debug line
                &if %line_length% <> 0 &then
                   &set over_list = [unquote %over_list%] [substr %line% %cut_pos%] /* extract last 6, append to previous
           &end
           &if [close %file%] <> 0 &then /* Close file.
               &return &warning Unable to close %file%.
           /*&listvar line /* debug, echo variable to screen
        &END
        /* --------------------------------------------------------------------
        &type ...tiles which surround center tile %todo%:
        &type    %over_list%
        /* save overlap list in a global var; append if globalvar not empty
        &if [null .over_list] &then &set .over_list = [unquote %over_list%]
            &else &set .over_list = %.over_list% [unquote %over_list%]
    &wo %.home%
&end
&type ...complete overlap list is:
&type    %.over_list%
&return
/*----------------------------------------------------------------------------
&routine too_many_pnts /* see $sysdocs::Topogrid_Too_Many_Points
/* we assume 'make_flipgrid' has already been run, and that the only reason a tile doesn't have a flipping dem is because it has "too many critical points"
&do quad &list [unquote %tile%]
   &wo %quad% ; &type ...%quad%
      &do todo &list [listfile * -workspace]
         &if [exists %todo%\fctr -cover] &then &goto End_Loop
         &if [exists %todo%\too_many -file] &then ~
            &do
                &wo %todo% ; &type        \%todo%
                    &sys sed 's/$/\\fctr/' overlap.path.bare > append.txt
                    &sys echo end >> append.txt
                    &sys arc append fctr link < append.txt
                    clip fctr buf_2k fctr-clip link
                    kill fctr all
                    rename fctr-clip fctr
                &wo ..
            &end
         &label End_Loop
      &end
   &wo ..
&end
&return
/*----------------------------------------------------------------------------
&routine mark_local_fctr /* see $sysdocs::Topogrid_Too_Many_Points
/* we assume 'make_flipgrid' has already been run, and that the only reason a tile doesn't have a flipping dem is because it has "too many critical points"
&type ...Searching for tiles which don't have FLIP_GRD
&do quad &list [unquote %tile%]
   &wo %quad%
      &type ...%quad%
      &do todo &list [listfile * -workspace]
         &type        \%todo%
         &if [exists %todo%\fctr -cover] &then &goto Local_Fctr
         &if [exists %todo%\flip_grd -grid] &then &goto End_Loop
            &label Local_Fctr
            &wo %todo%
                &sys echo This tile susceptible to the Topogrid "Too Many Points" error > too_many
                &type              \marked as "local fctr needed"
            &wo ..
         &label End_Loop
      &end
   &wo ..
&end
/*----------------------------------------------------------------------------
&routine kill_if_both
&type ...Searching for tiles which don't have FLIP_GRD *and* have local FCTR
&do quad &list [unquote %tile%]
   &wo %quad%
      &type ...%quad%
      &do todo &list [listfile * -workspace]
         &type        \%todo%
         &if not [exists %todo%\fctr -cover] AND ~
             not [exists %todo%\flip_grd -grid] &then

         &if not [exists %todo%\flip_grd -grid] &then &goto End_Loop
            &label Local_Fctr
            &wo %todo%
                &sys echo This tile susceptible to the Topogrid "Too Many Points" error > too_many
                &type              \marked as "local fctr needed"
            &wo ..
         &label End_Loop
      &end
   &wo ..
&end
/*----------------------------------------------------------------------------
/*----------------------------------------------------------------------------
&routine kill_0_arcs
&set cover = [response 'Covers to check for zero arcs?']
   &if [null %cover%] &then &return 'covername' empty.

&type ...nuking %cover% covers which have zero arcs
   &do quad &list [unquote %tile%]
      &wo %quad%; &type ...%quad%
         &do tile &list [listfile * -workspace]
            &describe  %tile%\%cover%
            &if %dsc$arcs% = 0 &then kill  %tile%\%cover% all
         &end
      &wo ..
   &end
&return
/*----------------------------------------------------------------------------

/*----------------------------------------------------------------------------
&routine save_streamdone

&type ...marking correctly flipped streams read only
&set quad_ok = 105l 105j 105e 105d 105e 105a 095d 095b 095c 095e 105h 104m 104n 104o 104p
   &do quad &list [unquote %quad_ok%]
      &wo %quad%
         &do tile &list [listfile * -workspace]
            &sys attrib +r %tile%\flip_streams.done
         &end
      &wo ..
   &end

&set quad_ok = 105k
&set tile_ok = 01 02 03 04 05 06 07 08 10
   &do quad &list [unquote %quad_ok%]
      &wo %quad%
         &do tile &list [unquote %tile_ok%]
            &sys attrib +r %quad%%tile%\flip_streams.done
         &end
      &wo ..
   &end

&pause
&return
/*----------------------------------------------------------------------------
&routine kill_streamdone
&type ...nuking incorrectly flipped streams
&delvar qua* til*

&set todo = 106l01 106l02 106l03 106l04 106l05 106l06 106l07 106l08 106l09 106l10 106l11 106l12


&do tile &list [unquote %todo%]
   &wo [substr %tile% 1 4]\%tile%
      &if [exists flip_streams.done -file] &then
         &do
            &sys del flip_streams.done
            &if not [exists flip_streams.done -file] &then &do
               &if [exists fwtc_f -cover] &then kill fwtc_f all
               &end
         &end
   &wo %.home%
&end

&return
/*----------------------------------------------------------------------------
/*----------------------------------------------------------------------------
&routine redo_around_center

&type ...rebuilding tiles which surround reworked 116j08
&delvar quad* tile*

&s quad_list 116j10 116j09 116i12 116j07 116j08 116i05 116j02 116j01 116i04

&type    %quad_list%

&pause
&do quad &list [unquote %quad_list%]
   &wo [substr %quad% 1 4]
      &do tile &list [listfile * -workspace]
         &wo %tile%
            &ty ...[show workspace]

            &do kill_list &list [listfile * -grid] [listfile f* -cover] [listfile dem* -cover]
               &if [exists %kill_list% -cover] | [exists %kill_list% -grid] &then kill %kill_list% all
            &end

            &sys del *dem*.*

            &if not [exists buf_1k -cover] &then
            buffer z:\arcdata\50k\lims\[substr %quad% 1 4]\%tile%\fneat buf_1k # # 1000 #

            &run append_elev [substr %quad% 1 4] %tile% ;
            &run append_h2o [substr %quad% 1 4] %tile% ;

            &run make_flipgrid [substr %quad% 1 4] %tile% ;

            &run flip_streams [substr %quad% 1 4] %tile% ;

            &run make_dems [substr %quad% 1 4] %tile% ;

            &sys attrib -r lock ; &sys del lock

         &wo ..
      &end
   &wo ..
&end

&return
/*----------------------------------------------------------------------------



















































/*******************************************************************************************************************************************************************************************************************************************

/* if there are commandline arguments, make them the TODO list
&args routine quad tile:REST
&ty --------------------------------------------------------------------------
&ty   * [upcase %aml$file%] * Project: Updated LIMS 50k DEM * mhw * 18-Sept-2k
&ty     ::Step #::  (see scripts\__ReadMe.aml)
&ty
&ty     - Quick and Dirty test range.
&ty     * Use at your own risk.
&ty
&ty     Usage: &r %aml$file% {routine} {quad} {tile(s)}
&ty --------------------------------------------------------------------------
&ty     About to execute: %aml$file% %routine% %quad% %tile%
&ty --------------------------------------------------------------------------
&r beep
&s pause [response '<Enter> to continue, something else to abort']
    &if not [null %pause%] &then &return %aml$file% exited by user request.

&if not [variable .library] &then &return &error Project Environment is not setup. Look for ./scripts/setenv.aml
&workspace %.home%

/* put header variables and other semi-global code here

&call %routine%


&RETURN ...[upcase %aml$fullfile%] finished normally.

&STOP
/*============================================================================
/* --------------------------------------------------------------------------
&routine kill_temps
&if not [variable quad] &then &set quad =
/* follow ...\<quad>\<tile>\  (...\115h\115h12\)  pattern
/* check for quad placeholder (allows "&r aml_prog . 105d11 105d12 105d13")
/*&if %quad% = . &then &set quad = [listfile * -directory]
/* check for quad commandline args
&if [null %quad%] &then &set quad = [listfile * -directory]
/* check for tile argument
&if not [null %tile%] &then &set tile_arg = yes

&do quad &list [unquote %quad%]
  &workspace %.home%\%quad%; &type ...entering %quad%
    /* check for TODO list on the command line, else TODO = existing workspaces
    &if [null %tile%] &then &set tile = [listfile * -workspace]

        &do tile &list [unquote %tile%]
            &if [exists %tile% -workspace] &then &do
               &wo %tile%
               &set kill_list [listfile xx* -cover]
               &if not [null %kill_list%] &then ~
                  &do kill_each &list %kill_list%
                     kill %kill_each% all
                  &end
               &wo ..
               &end
        &end

    /* if tile arg is autogenerated, null out else it won't be generated anew for next loop
    &if not [variable tile_arg] &then &set tile =

  &workspace  ..
&end
&RETURN
/* --------------------------------------------------------------------------

/*===========================================================================
&ROUTINE SET_TODO_LIST
/* follow ...\<quad>\<tile>\  (...\115h\115h12\)  pattern
/* check for quad placeholder (allows "&r aml_prog . 105d11 105d12 105d13")
&if %quad% = . &then &set quad = [listfile * -directory]
/* check for quad commandline args
&if [null %quad%] &then &set quad = [listfile * -directory]
/* check for tile argument
&if not [null %tile%] &then &set tile_arg = yes

&do quad &list [unquote %quad%]
  &workspace %.home%\%quad%; &type ...entering %quad%
    /* check for TODO list on the command line, else TODO = existing workspaces
    &if [null %tile%] &then &set tile = [listfile * -workspace]

        &do tile &list [unquote %tile%]
            &wo %tile%
&RETURN
&ROUTINE END_TODO_LIST
            &wo ..
        &end

    /* if tile arg is autogenerated, null out else it won't be generated anew for next loop
    &if not [variable tile_arg] &then &set tile =

  &workspace  ..
&end
&RETURN
/*============================================================================
/*============================================================================
&routine 1k_buffer
/*============================================================================
  &if [exists buf_1k -cover] &then &return
    /*-------mark workspace busy----------------------
    &if [exists lock -file] &then &return
    &set lockfile = [OPEN lock openstat -write]
    &if  %openstat% = 0 &then &type ...workspace %tile% locked
        &else &return Error %openstat% opening lockfile
    /*------------------------------------------------
    &type -----{ Making 1km buffer for %tile% }-----
        &do bsize &list 1000
            buffer %.library%\%quad%\%tile%\fneat buf%bsize% # # %bsize% # poly
        &end
        rename buf1000 buf_1k
    /*-------mark workspace not busy-----------------
    &if [close %lockfile%] = 0 &then
        &type ...workspace %tile% unlocked
        &else &return Error closing lockfile
    &sys del lock
    /*-----------------------------------------------
&return
/*============================================================================
/*============================================================================
&routine kill_fwtc
/*============================================================================
    &ty    \[show workspace]
    &set cov = fwtc
    &if [exists %cov% -cover] &then kill %cov% all
&return
/*============================================================================




/*&wo \50k_dem
/*&watch scrap_report.txt

/* &goto kill
/*&goto extract
/*&goto marcus
/*&goto aishihik
/* &goto prj_copy
/*&goto marcus

/*&goto move_grids
/*&goto int-grids

&goto marcus_2

/* &stop
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
&label marcus_2
&s X = ; &s I = ; &s K = ; &s Z = ; &s missing =
&s tile =  600 566 540 537 508 511 483 480 698 700 702 667 665 663 661 626 628 630 632 659 657 618 620 622 624 607 575 590 588 586 584 555 556 557 558 529 528 527 526 498 499 500 501 598 596 594 592 559 560 562 564 535 533 531 530 502 503 504 506 478 477 476 475 449 450 451 474 473 472 446 447 448 422 421
&type ([token %tile% -count]) Total Tiles

&type ********** [show workspace] **********
&do tile &list 600 566 540 537 508 511 483 480 698 700 702 667 665 663 661 626 628 630 632 659 657 618 620 622 624 607 575 590 588 586 584 555 556 557 558 529 528 527 526 498 499 500 501 598 596 594 592 559 560 562 564 535 533 531 530 502 503 504 506 478 477 476 475 449 450 451 474 473 472 446 447 448 422 421

    &if [exists I:\50k_dem\%tile%\dem_clip -grid] &then
        &s I = %I% %tile%
            &else &s Z = %z% %tile%
&end

&do tile &list [unquote %Z%]
    &if [exists X:\50k_dem\%tile%\dem_clip -grid] &then
        &s X = %X% %tile%
            &else &s missing = %missing% %tile%
&end

&type ([token %i% -count])    I: %I%
&ty
&type ([token %x% -count])    X: %X%
&ty

&type total missing tiles: ([token %missing% -count]): %missing%
&ty

/* --------------------------------------------
/* MOSAIC
/* --------------------------------------------
&sv tiles = %i%
    &wo I:\50k_dem
    &sv tile_count = [token %tiles% -count] + 1
    &set current = 1
    &set mos-cmd =
    &do &while %current% <> %tile_count%
        &if [null %mos-cmd%] &then
            &s mos-cmd = [extract %current% %tiles%]\dem_clip
        &else
            &s mos-cmd = %mos-cmd%,[extract %current% %tiles%]\dem_clip
        &set current = %current% + 1
    &end
&ty %mos-cmd%
    &set out_name = I
        GRID
            M:\_big\aish_%out_name% = MOSAIC (%mos-cmd%)
        QUIT

&sv tiles = %X%
    &wo X:\50k_dem
    &sv tile_count = [token %tiles% -count] + 1
    &set current = 1
    &set mos-cmd =
    &do &while %current% <> %tile_count%
        &if [null %mos-cmd%] &then
            &s mos-cmd = X:\50k_dem\[extract %current% %tiles%]\dem_clip
        &else
            &s mos-cmd = %mos-cmd%,X:\50k_dem\[extract %current% %tiles%]\dem_clip
        &set current = %current% + 1
    &end
&ty %mos-cmd%
    &set out_name = X
        GRID
            M:\_big\aish_%out_name% = MOSAIC (%mos-cmd%)
        QUIT
&stop
&return
/* --------------------------------------------
/* --------------------------------------------

/* --------------------------------------------------------------------------
&label move_grids
&do tile &list 101 102 117 118 133 302 323 369 388 390 393 415 417 468 619 621 623 648 652 654 656 658 681 685 689 691 693 694 695 711 722 724 726 728

    &do copyitem &list [listfile %tile%\* -grid]
        &if [null %copyitem%] &then &goto end
        &if [exists i:\50k_dem\%tile%\%copyitem% -grid] &then &goto kill

        copy %tile%\%copyitem% i:\50k_dem\%tile%\%copyitem%
            &label kill
            &if [exists i:\50k_dem\%tile%\%copyitem% -grid] &then
                kill %tile%\%copyitem% all
    &label end
    /* &stop
    &end

&end

&stop
/* --------------------------------------------------------------------------

/* --------------------------------------------------------------------------
&label prj_copy
&wo k:\50k_dem
&sv template = z:\arcdata\50k\base\database\index

&do tile &list 101 102 117 118 133 302 323 369 388 390 393 415 417 468 619 621 623 648 652 654 656 658 681 685 689 691 693 694 695 711 722 724 726 728
    &wo %tile%
    &do data &list [listfile * -cover]
        projectcopy cover %template% cover %data%
    &end
    &wo ..
&end
&r beep ; &r beep
&stop


&label aishihik
&wo x:\50k_dem
&do tile &list 600 566 540 537 508 511 483 480 698 700 702 667 665 663 661 626 628 630 632 659 657 618 620 622 624 607 575 590 588 586 584 555 556 557 558 529 528 527 526 498 499 500 501 598 596 594 592 559 560 562 564 535 533 531 530 502 503 504 506 478 477 476 475 449 450 451 474 473 472 446 447 448 422 421
    &if [exists %tile%\dem_clip -grid] &then &type %tile% OK
        &else &type %tile% NOT ok
&end
&stop
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
/*&label marcus
/*  list of tiles in Marcus' area of interest:
/*      502 503 504 530 531 533 559 560 562 474 558 529 501 477 476 475
/* tiles on X: drive (from SL dem project; Phase 1)
/*      504 533 562


&do tile &list 600 566 540 537 508 511 483 480 698 700 702 667 665 663 661 626 628 630 632 659 657 618 620 622 624 607 575 590 588 586 584 555 556 557 558 529 528 527 526 498 499 500 501 598 596 594 592 559 560 562 564 535 533 531 530 502 503 504 506 478 477 476 475 449 450 451 474 473 472 446 447 448 422 421
    &if [exists %tile%\dem_clip -grid] &then &type [show workspace]\%tile% OK
            &else &type [show workspace]\%tile% NOT ok
&end

&stop
/* --------------------------------------------
&LABEL MARCUS
/* --------------------------------------------

&set total = 598 596 594 562 564 575 504 506 478 564 535 533 540 537 508 511 483 480 698 700 702 667 665 663 628 630 632 618 607 600 566
&type [token %total% -count] total tiles


&set good_list =

&wo K:\50k_dem
    &call dem_check
&wo I:\50k_dem
    &call dem_check
&wo X:\50k_dem
    &call dem_check

&type [token %total% -count] total tiles
&type [token %good_list% -count] items (%good_list%)
&stop

&routine dem_check
&do tile &list 598 596 594 562 564 575 504 506 478 564 535 533 540 537 508 511 483 480 698 700 702 667 665 663 628 630 632 618 607 600 566
    &if [exists %tile%\dem_clip -grid] &then
        &do
          &type dem_clip found in %tile% OK
          &set good_list = %good_list% [show workspace]\%tile%
        &end
&end
&return

    /* search each 50k_dem development drive
    &do drive &list X I K
        &call dem_check
    &end
&end

&type [token %X_list% -count] tiles found on X:\50k_dem:
    &ty %X_list%
&type [token %I_list% -count] tiles found on X:\50k_dem:
    &ty %I_list%
&type [token %K_list% -count] tiles found on X:\50k_dem:
    &ty %K_list%
&stop
&setvar tiles = [unquote %good_list%]
    &sv out_name = 0
    &call mosaic
&r beep ; &r beep
&return ; &stop
/* --------------------------------------------
&routine mosaic
    &sv tile_count = [token %tiles% -count] + 1
    &set current = 1
    &set mos-cmd =
    &do &while %current% <> %tile_count%
        &if [null %mos-cmd%] &then
            &s mos-cmd = X:\50k_dem\[extract %current% %tiles%]\dem_clip
        &else
            &s mos-cmd = %mos-cmd%,[extract %current% %tiles%]\dem_clip
        &set current = %current% + 1
    &end
    GRID
        &sv out_name = %out_name% + 1
        M:\_big\aish_%out_name% = MOSAIC (%mos-cmd%)
    quit
&return
/* --------------------------------------------
&stop
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
&label next
&severity &error &ignore
&do tile &list 502 503 530 531 559 560 474 558 529 501 477 476 475
    &wo %tile%
    &if [exists dem_clip -grid] &then &type [show workspace]\dem missing
    &wo k:\50k_dem\
&end
&do tile &list 504 533 562
    &wo x:\50k_dem\%tile%
    &if not [exists dem_clip -grid] &then &type [show workspace]\dem missing
        &else &type x:\50k_dem\%tile% OK
    &wo k:\50k_dem
&end
&stop

&watch &off
&stop
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
&label kill
&severity &error &ignore
    &do tile &list 150 167 168 169 170 288 323 369 388 390 393 412 415 468 648 652 681 685
        &wo %tile%
        kill fctr info
        kill fctr arc
        rd /s/q fctr
        &wo ..
    &end
&watch &off
&stop
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
&label extract
    LIBRARIAN
    library rr50
    setlayers elevation
    &do tile &list 150 167 168 169 170 288 323 369 388 390 393 412 415 468 648 652 681 685
        &wo k:\50k_dem\%tile%
        &show &workspace
        setcover none
        setcover buf_2k
        &if [exists fctr -cover] &then &end
            &else extract topological # clip
        &wo ..
    &end
    QUIT

&watch &off
&stop


/* work list:
/* 150 167 168 169 170 288 323 369 388 390 393 412 415 468 648 652 681 685

/* --------------------------------------------------------------------------
&routine verify
&set filename [response 'File to search for (fctr.path)' fctr.path]
/* follow ...\<quad>\<tile>\  (...\115h\115h12\)  pattern
/* check for quad placeholder (allows "&r aml_prog . 105d11 105d12 105d13")
&if %quad% = . &then &set quad = [listfile * -directory]
/* check for quad commandline args
&if [null %quad%] &then &set quad = [listfile * -directory]
/* check for tile argument
&if not [null %tile%] &then &set tile_arg = yes

&do quad &list [unquote %quad%]
  &workspace %.home%\%quad%; &type ...entering %quad%
    /* check for TODO list on the command line, else TODO = existing workspaces
    &if [null %tile%] &then &set tile = [listfile * -workspace]

        &do tile &list [unquote %tile%]
            &wo %tile%

            &if not [exists %filename% -file] &then ~
               &type [show workspace] is missing %filename%

            &wo ..
        &end

    /* if tile arg is autogenerated, null out else it won't be generated anew for next loop
    &if not [variable tile_arg] &then &set tile =

  &workspace  ..
&end
&RETURN
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
/* --------------------------------------------------------------------------
