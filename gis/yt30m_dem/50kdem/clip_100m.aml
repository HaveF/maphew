&severity &error &routine bail
/* if there are commandline arguments, make them the TODO list
&args quad tile:REST
&ty --------------------------------------------------------------------------
&ty   * [upcase %aml$file%] * Project: Updated LIMS 50k DEM * mhw * 18-Sept-2k
&ty     ::Step 10::  (see scripts\__ReadMe.aml)
&ty
&ty     - clips DEMs to 100m buffer
&ty     - to be run after DEMs have been verified correct, in preparation for
&ty       mosaicing and insertion into repository.
&ty
&ty
&ty     Autorun: &r %aml$file% {quad} {tile(s)}
&ty --------------------------------------------------------------------------
&if [null %quad%] &then &do
    &s pause [response '<Enter> to continue, something else to abort']
    &if not [null %pause%] &then &return %aml$file% exited by user request.
    &end

&if not [variable .library] &then &return &error Project Environment is not setup. Look for ./scripts/setenv.aml
&workspace %.home%

/* put header variables and other semi-global code here
&set boundary = buf_100m      /* the clipping polygon
&set grid_list = dem dem_hs dem_flak   /* the grids to be clipped

/* follow ...\<quad>\<tile>\  (...\115h\115h12\)  pattern
/* check for quad placeholder (allows "&r aml_prog . 105d11 105d12 105d13")
&if %quad% = . &then &set quad = [listfile * -directory]
/* check for quad commandline args
&if [null %quad%] &then &set quad = [listfile * -directory]
/* check for tile argument
&if not [null %tile%] &then &set tile_arg = yes

&do quad &list [unquote %quad%]
  &workspace %quad%; &type ...entering %quad%
    /* check for TODO list on the command line, else TODO = existing workspaces
    &if [null %tile%] &then &set tile = [listfile * -workspace]

        &do tile &list [unquote %tile%]
            &call main
        &end

    /* if tile arg is autogenerated, null out else it won't be generated anew for next loop
    &if not [variable tile_arg] &then &set tile =

  &workspace  ..
&end

&RETURN ...[upcase %aml$fullfile%] finished normally.

/*============================================================================
&ROUTINE MAIN
   /*-------mark workspace busy----------------------
   &if [exists %tile%\lock -file] &then &return
   &set lockfile = [OPEN %tile%\lock openstat -write]
   &if  %openstat% = 0 &then &type ...workspace %tile% locked
     &else &return Error %openstat% opening lockfile
   /*------------------------------------------------
   &workspace %tile%

   &call use_markers

   &workspace ..
   /*-------mark workspace not busy-----------------
   &if [close %lockfile%] = 0 &then
     &type ...workspace %tile% unlocked
     &else &return Error closing lockfile
   &sys del %tile%\lock
   /*-----------------------------------------------
&RETURN
/*---------------------------------------------------------------------------
/* other routines go here

&routine bail
   &if not [variable str] &then &s str Bailing out of %aml$file%...
   &return; &return &warning %str%
/*===========================================================================
/* End Of CLIP_100M.aml
/*===========================================================================


/* ===========================================================================
/* obsolete method. Was prone to error because if you forget to delete the "is_done" marker file when you regenerate the dem, you will also forget to clip the final dem to the 100m clipping poly
&routine use_markers
   &do for_each &list [unquote %grid_list%]
      &if [exists %for_each%_is_100m -file] &then &goto End_ForEach
         &if [exists %for_each% -grid] &then &do
            latticeclip %for_each% %boundary% %for_each%_clip
            kill %for_each% all
            rename %for_each%_clip %for_each%
            &type ...Renamed %for_each%_clip to %for_each%
            &sys echo clipped to 100m boundary > %for_each%_is_100m
         &end
      &label End_ForEach
   &end
&return

&routine by_extents
/*nice idea, but it doesn't work. back to the old way.

   /* find min/max extent of clip poly and grid
   &describe %boundary%
   &set clip-ext = [quote %dsc$xmin% %dsc$xmax% %dsc$ymin% %dsc$ymax%]
   /*&type ...%boundary% extent: %clip-ext% /* debug line
   &describe %for_each%
   &set grid-ext = [quote %lat$xmin% %lat$xmax% %lat$ymin% %lat$ymax%]
   /*&type ...%for_each% extent: %grid-ext% /* debug line

   &set xmin = %dsc$xmin% - %lat$xmin%
   &if %xmin% < 0 &then &set xmin = %xmin% * -1

   /*&if %clip-ext% <> %grid-ext% &then &do
   &if %xmin% > 100 &then &do
      &type ...extents are more than 100m different, clipping
      latticeclip %for_each% %boundary% %for_each%_clip
      kill %for_each% all
      rename %for_each%_clip %for_each%
      &type ...Renamed %for_each%_clip to %for_each%
      &end

   /* get rid of the obsolete "is_done" file
   &if [exists %for_each%_is_100m -file] &then &do
      &set tmpvar [delete %for_each%_is_100m -file]
      &end
&return

&routine bail
   &if not [variable str] &then &s str Bailing out of %aml$file%...
   &return; &return &warning %str%
/*===========================================================================
