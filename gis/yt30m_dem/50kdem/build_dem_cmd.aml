&severity &error &routine bail
/* -------------------------------------------------------------------------
&args tile cell-size elev contours watercourses lake_ctr
/* -------------------------------------------------------------------------
&if [null %watercourses%] &then
   &return /&...USAGE: &r %aml$file% {tile} {cell-size} {elev} {contours} {watercourses} {lake_ctr} .../&

&type ...building ANUDEM cmd file for %tile%

&describe %contours%
&s enforce = 1       /* Enforcement [Off|On|Diag]
&s main_type = 1     /* contours=1, points=0
&s rms = 1.0         /* RMS  (1.0)
&s vse = 0.0         /* vertical SE (0.0)
&s rough = 0.5      /* roughness tradeoff penalty; contour=0.0, point=0.5
&call Tolerances     /* autocalc the values from input data
   /* &s Tol_1 =        /* half contour interval
   /* &s Tol_2 =        /* half the total elevation span
&s iterate = 40      /* max number of iterations (40)
&s Zunit = 1         /* 1=meters, 2=feet
/* autocalc'd in Tolerances routine
   /*&s minZ =          /* Elevation Extent
   /*&s maxZ =
&s pix-cnt = 1          /* pixel center = center of cell or corners (1)
&s hor-unit = 1         /* horizontal units, meters=1

&s cell-size = %cell-size%      /* size of single pixel in ground units
/* ------------------------------------
/* Min--Max's autocalc'd from earlier &describe
&s minX = [before %dsc$xmin% .]                       /* Longitude min-max
   &s minX = %minX% - [mod %minX% %cell-size%]
&s maxX = [before %dsc$xmax% .]
   &s offset = %cell-size% - [mod %maxX% %cell-size%]
   &s maxX = %maxX% + %offset%
&s minY = [before %dsc$ymin% .]                       /* Latitude min-max
   &s minY = %minY% - [mod %minY% %cell-size%]
&s maxY = [before %dsc$ymax% .]
   &s offset = %cell-size% - [mod %maxY% %cell-size%]
   &s maxY = %maxY% + %offset%
/* special thanks to Timothy N. Loesch, Minnesota Department of Natural Resources, for providing the Avenue example script which helped me figure this part out. -matt
/* ------------------------------------

/*  no need to specify, columns/rows are automatically calculated by ANUDEM
&s out-cols =              /* num output columns
&s out-rows =              /* num output rows
&s margin   = 0.0          /* Margin (default = 20)
&s wrk-cols =              /* num working columns
&s wrk-rows =              /* num working rows

/* ---------------------------------------------------------------------
&s in_total =           /* # of input data files (auto calculated later)
/* ANUDEM type #s for ArcInfo ungenerate input data types:
/*    21=ARC/INFO POINT DATA    24=ARC/INFO POLYGON
/*    22=ARC/INFO SINK POINT    25=ARC/INFO CONTOUR
/*    23=ARC/INFO STREAMLINE    26=ARC/INFO LAKE BDRY
/* &s in_%cover% = path to ungenerate file
/* &s in_%cover% = ANUDEM type #
&s in_cont = %contours%.gen         /* contours
&s in_cont# = 25

&do /* verify the data exists
   &s in_lakectr = ; &s in_lakectr# = /*initialize as empty
   &if [exists %lake_ctr% -cover] &then &do
      &s in_lakectr = %lake_ctr%.gen  /* lake boundaries as contours
      &s in_lakectr# = 25
      &end
&end

&s in_pnt1 = /* ak_pnt.gen       /* alaskan point data
&s in_pnt1# = /* 21
&s in_pnt2 = /* bc_pnt.gen       /* BC point data
&s in_pnt2# = /* 21

&do /* verify the data exists
   &s in_crik = ; &s in_crik# = /*initialize as empty
   &if [exists %watercourses% -cover] &then &do
      &s in_crik = %watercourses%.gen         /* stream lines
      &s in_crik# = 23
      &end
&end

&s in_lake = /* fwtb.gen      /* lake boundaries as lake boundaries
&s in_lake# = /* 26

&s in_bnd = /* buf_1k.gen     /* area of interest polygon
&s in_bnd# = /* 24
/* ---------------------------------------------------------------------

&s out-dem = %tile%.dem    /* output dem
&s out-type = 2            /* dem datatype (2 = Arc Ascii GRID)
&s out-def =               /* dataype definition (blank=bin, (8F10.3)=ascii)

/* diagnostics
&s sinks = %tile%-dem.snk       /* sink errors
&s out-crik =              /* output streams (blank | %tile%-dem.crk)
&s res = %tile%-dem.res         /* large residuals
&s strmer = %tile%-dem.ser      /* stream errors
&s bnder = %tile%-dem.ber       /* boundary poly errors
&s conter = %tile%-dem.cer      /* contour errors
&s laker = %tile%-dem.ler       /* lake errors
&s grid_pnt =              /* grid point (blank | %tile%-dem.pnt)
&s aspect =                /* aspect grid (blank | %dem%.asp)


&s cmdfile = %tile%-dem.cmd   /* ANUDEM command file
/* ------------------------------------------------------------------------

/* ------------------------------------------------------------------------
/* build the ANUDEM command file. !NOTE! the command order is immutable
&sys echo %enforce%        >  %cmdfile%  /* enforce off|on|diag
&sys echo %main_type%      >> %cmdfile%  /* Main datatype is...
&sys echo %rms% %vse%      >> %cmdfile%  /* RMS and vertical SE = 1.0 0.0
&sys echo %rough%          >> %cmdfile%  /* Roughness Trade-Off = 0.05
&sys echo %Tol_1% %Tol_2%  >> %cmdfile%  /* tolerances
&sys echo %iterate%        >> %cmdfile%  /* Max Iterations = 40
&sys echo %Zunit%          >> %cmdfile%  /* meters = 1
&sys echo %minZ% %maxZ%    >> %cmdfile%  /* vertical extents
&sys echo %pix-cnt%        >> %cmdfile%  /* pixel center is = 1 (in center)
&sys echo %hor-unit%       >> %cmdfile%  /* Hor. Units = 1 (meters)
&sys echo %minX% %maxX%    >> %cmdfile%  /* Long. extents
&sys echo %minY% %maxY%    >> %cmdfile%  /* Lat. extents
&sys echo %cell-size%      >> %cmdfile%  /* cell size
&sys echo %out-cols%       >> %cmdfile%   /* output columns
&sys echo %out-rows%       >> %cmdfile%   /* output rows
&sys echo %margin%         >> %cmdfile%   /* margin
&sys echo %wrk-cols%       >> %cmdfile%   /* working grid columns
&sys echo %wrk-rows%       >> %cmdfile%   /* working grid rows
&do   /* cycle through all input data until done
   &s inputs = %in_cont% %in_cont#% %in_crik% %in_crik#% %in_lake% %in_lake#%
   &s in_total = [token %inputs% -count] / 2
      &sys echo %in_total%    >> %cmdfile%   /* number of input data files
   &do input_each &list %inputs%
      &sys echo %input_each%  >> %cmdfile%
   &end
&end
/* output files
&sys echo %out-dem%       >> %cmdfile%  /* output demfile
&sys echo %out-type%      >> %cmdfile%  /* output flavour (ArcGRID Ascii, etc.)
&sys echo %out-def%       >> %cmdfile%  /* output type definition (ascii, binary)
/* diagnostics output
&sys echo %sinks%       >> %cmdfile%      /* sink errors
&sys echo %out-crik%    >> %cmdfile%      /* output streams (blank | %dem%.crk)
&sys echo %res%         >> %cmdfile%      /* large residuals
&sys echo %strmer%      >> %cmdfile%      /* stream errors
&sys echo %bnder%       >> %cmdfile%      /* boundary poly errors
&sys echo %conter%      >> %cmdfile%      /* contour errors
&sys echo %laker%       >> %cmdfile%      /* lake errors
&sys echo %grid_pnt%    >> %cmdfile%      /* grid point (blank | %dem%.pnt)
&sys echo %aspect%      >> %cmdfile%      /* aspect grid (blank | %dem%.asp)

/* strip ECHO lines which should be blank
&sys sed 's/^.*ECHO.*$//' %cmdfile% > %cmdfile%-tmp
&sys del %cmdfile%
&sys rename %cmdfile%-tmp %cmdfile%
/*&sys unix2dos %cmdfile%

&type ...ANUDEM %cmdfile% file is built.
/*&listlocal /* debug line

&RETURN ...[upcase %aml$fullfile%] finished normally.
/* ------------------------------------------------------------------------
/* ------------------------------------------------------------------------
&routine tolerances
/* Tolerance 1 is half the contour interval ((cont2 - cont1)/2)
/* Tolerance 2 is half the total relief (min-max elevation)

   /* in order to ignore "Result too long" errors
   &severity &error &ignore
   &delvar unique

   /* list unique elevation values for center tile
/*   &set unique = [format [listunique %contours%.aat -info %elev%]
   /* if var 'unique' does not exist, it's because listunique result was too long, therefore we need to write to a file and extract our min,max & interval from that
   &if not [variable unique] &then &do
      &setvar fil = elev_range.list
      /* write unique values to file
      &set unique = [listunique %contours%.aat -info %elev% %fil%]
      /* open the file for reading
      &setvar filunit := [open %fil% openstatus -read]
         /* Check for error in opening file.
         &if %openstatus% <> 0 &then &return &warning Error opening %fil%.
      /* Read first line from file
      &setvar line := [read %filunit% readstatus]
         &if %readstatus% <> 0 &then &return &warning Could not read %fil%.
      /* assign contents of first line to first element in var 'unique'
      &set unique = %line%
      /* read second line and append to var 'unique'
      &set line =  [read %filunit% readstatus]
      &set unique = %unique% %line% /*first line + second line

      /* read until we hit end of file (we don't need the in-between values)
      &do &until %readstatus% = 102
        /* save the previous line
        &set prev_line = %line%
        /* Read next line.
        &set line = [read %filunit% readstatus]
        &if %readstatus% = 101 &then &return &warning Error 101 during read %fil%.
      &end

      &set unique = %unique% %prev_line% /*first line + second line + last line

      /* Close file.
      &if [close %filunit%] <> 0 &then &return &warning Unable to close %fil%.
   &end


   /* get the first two values (which are the lowest)
   &set val_1 = [extract 1 %unique%]
   &set val_2 = [extract 2 %unique%]
   /* and the last (also the maximum)
   &set count = [token %unique% -count]
   &set last = [extract %count% %unique%]

/*
/*   /* if 'count' is too low, it's because token-count result was too long
/*   &if not %count% > 2 &then &do
/*      &set val_1 = 600 ; &set val_2 = 620 ; &set last = 2600
/*      &end
/*
   /* subtract from each other to get the contour interval, divide by 2
   &set half = ( %val_2% - %val_1% ) / 2
   /* strip everything after the decimal
   &set Tol_1 = [before [quote %half%] .]

   /* find half total elevation span
   &set half = ( %last% - %val_1% ) / 2
   /* strip everything after the decimal
   &set Tol_2 = [before [quote %half%] .]

   &set minZ = [before [quote %val_1%] .]
   &set maxZ = [before [quote %last%] .]

   &type     half contour interval is %Tol_1% meters. Half relief is %Tol_2%.

   /* clean out temporary variables
   &delvar val_* count last half unique
&return
/* ------------------------------------------------------------------------
&routine bail
   &if not [variable str] &then &s str Bailing out of %aml$file%...
   &return; &return &warning %str%
/*===========================================================================
