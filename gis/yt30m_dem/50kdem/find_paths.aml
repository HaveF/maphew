/*===========================================================================
&severity &error &routine bail
/* if there are commandline arguments, make them the TODO list
&args quad tile:REST
&ty --------------------------------------------------------------------------
&ty   * [upcase %aml$file%] * Project: Updated LIMS 50k DEM * mhw * 02-Aug-2k
&ty     ::Step 3::  (see scripts\__ReadMe.aml)
&ty
&ty     - For each tile & adjacent neighbours identify path to library base data
&ty     - write paths to tilename\overlap.tiles
&ty     * Warning: this script requires "grep" and "sed" to be in path
&ty --------------------------------------------------------------------------
&if [null %quad%] &then &do
    &s pause [response '<Enter> to continue, something else to abort']
    &if not [null %pause%] &then &return %aml$file% exited by user request.
    &end

&if not [variable .library] &then &return &error Project Environment is not setup. Look for ./scripts/setenv.aml
&workspace %.home%

/* put header variables and other semi-global code here
&if [locase[show program]] <> arcplot &then ARCPLOT
&set cover_list = fwtc fctr

/* follow ...\<quad>\<tile>\  (...\115h\115h12\)  pattern
/* check for quad placeholder (allows "&r aml_prog . 105d11 105d12 105d13")
&if %quad% = . &then &set quad = [listfile * -directory]
/* check for quad commandline args
&if [null %quad%] &then &set quad = [listfile * -directory]
/* check for tile argument
&if not [null %tile%] &then &set tile_arg = yes

&do quad &list [unquote %quad%]
  &workspace %quad%; &type ...entering %quad%
    /* check for TODO list on the command line, else TODO = existing workspaces
    &if [null %tile%] &then &set tile = [listfile * -workspace]

        &do tile &list [unquote %tile%]
        &type ...processing %tile%
        &call main      /* identify which tiles surround center tile
        &call by_cover  /* write text file with paths for each cover type
        &call verify_covers /* see which covers actually exist
        &end

    /* if tile arg is autogenerated, null out else it won't be generated anew for next loop
    &if not [variable tile_arg] &then &set tile =

  &workspace  ..
&end

&if [locase[show program]] = arcplot &then QUIT

&RETURN ...[upcase %aml$fullfile%] finished normally.

/* ----------------------------------------------------------------------------
&ROUTINE MAIN
    &if [exists %tile%\overlap.tiles] &then &return
    clearselect
    /* select tiles which overlap the current tile buffer
    reselect %.index% POLY OVERLAP %tile%\buf_2k poly
    /* initialize output file
    listoutput %tile%\overlap.tiles INIT
    /* write 'location' attribute to the file, looks like:
        /*             57
        /*location                   = z:\arcdata\250k\albers\095b
        /*             59
        /*location                   = z:\arcdata\250k\albers\095c
    list %.index% POLY 0 location

    /* reset so we don't overwrite our pathfile by mistake
    listoutput screen
    /* get rid of all the extraneous junk output by list command
    /* On NT requires GNU Utilities installed
    &workspace %tile%
    &sys grep arcdata overlap.tiles > overlap.path
    &sys sed 's/location//' overlap.path > overlap.path.bare
    &sys sed 's/=//' overlap.path.bare > overlap.path.bare2
    &sys del overlap.path.bare
    &sys ren overlap.path.bare2 overlap.path.bare
    &workspace ..
&RETURN
/* ----------------------------------------------------------------------------
&routine by_cover
   &workspace %tile%
      &do cov &list [unquote %cover_list%]
         &if [exists %cov%.path -file] &then &s null-op =
            /* &then &sys del %cov%.path /* replace null-op for overwrite
         &if not [exists %cov%.path -file] &then
            &do /* append covername to the path statement
               &sys sed [quote s/$/\\\%cov%/] overlap.path.bare > %cov%.path
               &sys echo END >> %cov%.path
               &type     %cov%.path written
            &end
      &end
   &workspace ..
&return
/* ----------------------------------------------------------------------------
&routine verify_covers
   &workspace %tile%
      &do cov &list [unquote %cover_list%]
         &set srcfile = [OPEN %cov%.path openstat -read]
                           &if  %openstat% <> 0 &then
                              &return Error %openstat% opening %srcfile%
         &set line = [READ %srcfile% readstatus]
                           &if %readstatus% <> 0 &then
                              &return &warning Could not read %srcfile%.
         &do &while %readstatus% = 0
            /* --------------------------------------
            &set line = [unquote %line%]
            &if [exists %line% -cover] &then &do
                  &type %line% exists
                  &sys echo %line% >> new.%cov%.path
               &end
            /* --------------------------------------
            /* Read next line.
            &setvar line := [read %srcfile% readstatus]
         &end
         /* Close file.
                           &if [close %srcfile%] <> 0 &then
                              &return &warning Unable to close %srcfile%.

         &sys echo END >> new.%cov%.path
         &sys del %cov%.path
         &sys rename new.%cov%.path %cov%.path

      &end
   &workspace ..
&return
/* ----------------------------------------------------------------------------

&routine bail
   &if not [variable str] &then &s str Bailing out of %aml$file%...
   &return; &return &warning %str%
/*===========================================================================