/*===========================================================================
&severity &error &routine bail
/* if there are commandline arguments, make them the TODO list
&args quad tile:REST
&ty --------------------------------------------------------------------------
&ty   * [upcase %aml$file%] * Project: Updated LIMS 50k DEM * mhw * 02-Aug-2k
&ty     ::Step 4::  (see scripts\__ReadMe.aml)
&ty
&ty     - clip lake contour'd border to 2k buffer
&ty --------------------------------------------------------------------------
&if [null %quad%] &then &do
    &s pause [response '<Enter> to continue, something else to abort']
    &if not [null %pause%] &then &return %aml$file% exited by user request.
    &end

&if not [variable .library] &then &return &error Project Environment is not setup. Look for ./scripts/setenv.aml
&workspace %.home%

/* put header variables and other semi-global code here
&setvar biglake = x:\water\final\lakes_final
/*&setvar biglake = x:\water\final\wat11-06-00 /* ocean coeastline

/* follow ...\<quad>\<tile>\  (...\115h\115h12\)  pattern
/* check for quad placeholder (allows "&r aml_prog . 105d11 105d12 105d13")
&if %quad% = . &then &set quad = [listfile * -directory]
/* check for quad commandline args
&if [null %quad%] &then &set quad = [listfile * -directory]
/* check for tile argument
&if not [null %tile%] &then &set tile_arg = yes

&do quad &list [unquote %quad%]
  &workspace %quad%; &type ...entering %quad%
    /* check for TODO list on the command line, else TODO = existing workspaces
    &if [null %tile%] &then &set tile = [listfile * -workspace]

        &do tile &list [unquote %tile%]
          &workspace %tile%
            &call main
          &workspace ..
        &end

    /* if tile arg is autogenerated, null out else it won't be generated anew for next loop
    &if not [variable tile_arg] &then &set tile =

  &workspace  ..
&end

&RETURN ...[upcase %aml$fullfile%] finished normally.

/*============================================================================
&ROUTINE MAIN
    &if [exists lake_ctr -cover] OR [exists clip_lakes.done -file] &then &return
    /*-------mark workspace busy----------------------
    &if [exists lock -file] &then &return
    &set lockfile = [OPEN lock openstat -write]
    &if  %openstat% = 0 &then &type ...workspace %tile% locked
        &else &return Error %openstat% opening lockfile
    /*------------------------------------------------
    &type ...Killing off Round I mistakes
       &if [exist lake_ctr -cover] &then kill lake_ctr all
       &if [exist lake_ctr1 -cover] &then kill lake_ctr1 all
       &if [exist lake_ctr2 -cover] &then kill lake_ctr2 all


    &severity &error &ignore
       &type ...Making Round II mistakes
       /* clip <source> <clipping_cover> <destination> {type} {tolerance}
       clip %biglake% buf_2k lake_ctr LINE 0.0000001
    &severity &error &routine bail

      &describe  lake_ctr
      &if %dsc$arcs% = 0 &then &do
         &type   %tile% lake_ctr coverage is empty, nuking
         kill lake_ctr all
         &sys echo No lakes in this tile!>clip_lakes.done
         &end

    &label Fini
    /*-------mark workspace not busy-----------------
    &if [close %lockfile%] = 0 &then
        &type ...workspace %tile% unlocked
        &else &return Error closing lockfile
    &sys del lock
    /*-----------------------------------------------
&RETURN
/*============================================================================
&routine bail
   &if not [variable str] &then &s str Bailing out of %aml$file%...
   &return; &return &warning %str%
/*===========================================================================
